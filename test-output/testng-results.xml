<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="3" total="11" passed="7">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="105" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
    <groups>
    </groups>
    <test name="Regression" duration-ms="105" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
      <class name="TestNG.Test2">
        <test-method status="PASS" signature="BeforeSuite()[pri:0, instance:TestNG.Test2@3e9b1010]" name="BeforeSuite" is-config="true" duration-ms="19" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeSuite -->
        <test-method status="PASS" signature="Test01(java.lang.String, java.lang.String)[pri:0, instance:TestNG.Test2@3e9b1010]" name="Test01" duration-ms="2" started-at="2019-10-02T21:02:05 IST" data-provider="getData" finished-at="2019-10-02T21:02:05 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[username1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[password1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test01 -->
        <test-method status="PASS" signature="Test01(java.lang.String, java.lang.String)[pri:0, instance:TestNG.Test2@3e9b1010]" name="Test01" duration-ms="3" started-at="2019-10-02T21:02:05 IST" data-provider="getData" finished-at="2019-10-02T21:02:05 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[username2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[password2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test01 -->
        <test-method status="PASS" signature="Test01(java.lang.String, java.lang.String)[pri:0, instance:TestNG.Test2@3e9b1010]" name="Test01" duration-ms="2" started-at="2019-10-02T21:02:05 IST" data-provider="getData" finished-at="2019-10-02T21:02:05 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[username3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[password3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test01 -->
        <test-method status="PASS" signature="Test03()[pri:0, instance:TestNG.Test2@3e9b1010]" name="Test03" duration-ms="0" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test03 -->
        <test-method status="PASS" signature="AfterSuite()[pri:0, instance:TestNG.Test2@3e9b1010]" name="AfterSuite" is-config="true" duration-ms="0" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterSuite -->
      </class> <!-- TestNG.Test2 -->
      <class name="TestNG.Test1">
        <test-method status="PASS" signature="BeforeTest()[pri:0, instance:TestNG.Test1@6c3708b3]" name="BeforeTest" is-config="true" duration-ms="0" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeTest -->
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:TestNG.Test1@6c3708b3]" name="BeforeClass" is-config="true" duration-ms="1" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="Test02()[pri:0, instance:TestNG.Test1@6c3708b3]" name="Test02" duration-ms="4" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test02 -->
        <test-method status="PASS" signature="Test03()[pri:0, instance:TestNG.Test1@6c3708b3]" name="Test03" duration-ms="2" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test03 -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:TestNG.Test1@6c3708b3]" name="AfterClass" is-config="true" duration-ms="0" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterClass -->
        <test-method status="PASS" signature="AfterTest()[pri:0, instance:TestNG.Test1@6c3708b3]" name="AfterTest" is-config="true" duration-ms="0" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterTest -->
      </class> <!-- TestNG.Test1 -->
      <class name="TestNG.Test3">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:TestNG.Test3@6f1fba17]" name="beforeClass" is-config="true" duration-ms="1" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="Test02(java.lang.String, java.lang.String)[pri:0, instance:TestNG.Test3@6f1fba17]" name="Test02" duration-ms="0" started-at="2019-10-02T21:02:05 IST" finished-at="2019-10-02T21:02:05 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[www.google.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[sada]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test02 -->
        <test-method status="FAIL" signature="Test01()[pri:0, instance:TestNG.Test3@6f1fba17]" name="Test01" duration-ms="5" started-at="2019-10-02T21:02:05 IST" depends-on-methods="TestNG.Test3.Test02" finished-at="2019-10-02T21:02:05 IST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at TestNG.Test3.Test01(Test3.java:20)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:41)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:443)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:67)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test01 -->
      </class> <!-- TestNG.Test3 -->
    </test> <!-- Regression -->
  </suite> <!-- Suite -->
</testng-results>
